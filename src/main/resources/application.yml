server:
  address: localhost
  port: 8080

spring:

  thymeleaf:
    suffix: .html
    prefix: classpath:/templates/

  # 데이터 소스 설정
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/shoewise?serverTimezone=UTC&characterEncoding=UTF-8
    username: 
    password:

  # JPA 설정
  jpa:
    database: mysql
    database-platform: org.hibernate.dialect.MySQL8Dialect
    generate-ddl: true
    show-sql: true
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        show_sql: true
        format_sql: true

  # Security OAuth
  security:
    oauth2.client:
      registration:
        naver:
          client-id: 
          client-secret: 
          client-authentication-method: post
          authorization-grant-type: authorization_code
          redirect-uri: "http://localhost:8080/login/oauth2/code/naver"
          scope: profile_name, account_email #동의 항목
          client-name: Naver
        kakao:
          client-id: 
          client-secret: 
          client-authentication-method: post
          authorization-grant-type: authorization_code
          redirect-uri: "http://localhost:8080/login/oauth2/code/kakao" #Redirect URI를 통해 우리가 얻으려는 code(인가코드)를 반환 받는다
          scope: profile_nickname, account_email
          client-name: Kakao

      # Provider 설정
      provider:
        naver:
          authorization-uri: https://nid.naver.com/oauth2.0/authorize
          token-uri: https://nid.naver.com/oauth2.0/token
          user-info-uri: https://openapi.naver.com/v1/nid/me
          user-name-attribute: response
        kakao:
          authorization-uri: https://kauth.kakao.com/oauth/authorize
          token-uri: https://kauth.kakao.com/oauth/token
          user-info-uri: https://kapi.kakao.com/v2/user/me

          user-name-attribute: id

# cors 설정
cors:
  allowed-origins: 'http://localhost:3000'
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
  allowed-headers: '*'
  max-age: 3600

# jwt secret key 설정
jwt:
  secretKey: 
  access:
    header: Authorization

  refresh:
    header: Authorization-refresh

# 토큰 관련 secret Key 및 RedirectUri 설정
app:
  auth:
    token:
      secret-key: 
      refresh-cookie-key: "refresh"
  oauth2:
    # OAuth2 공급자로 성공적으로 인증한 후 사용자에 대한 인증 토큰을 생성
    # 토큰을 프론트엔드 클라이언트가 /oauth2/authorize 요청에서 지정한 redirectUri
    authorizedRedirectUri: "http://localhost:3000/oauth2/redirect"
